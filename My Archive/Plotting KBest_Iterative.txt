%%capture cap --no-stdout
def FindBestK_Filtering_plot(X_train,X_test,metric_of_KBest):
        results=[]
        states=[]
        clf = LogisticRegression( solver='sag', multi_class='multinomial',penalty='l2')
        k_KBest=X_train.shape[1]
        X_train_old,X_test_old=KBestFS(X_train,X_test,metric_of_KBest,k_KBest)
        result=Trainning(X_train_old,X_test_old,y_train,y_test,clf,'SelectKBest_'+str(k_KBest))
        old_measure=result.Score_train
        results.append(result)
        states.append('SelectKBest_'+str(k_KBest))
        
        while True:
            print('k_KBest '+str(k_KBest))
            print('old_measure '+str(old_measure))
            k_old = k_KBest
            k_KBest=math.floor(k_KBest/2)
            X_train_new,X_test_new=KBestFS(X_train_old,X_test_old,metric_of_KBest,k_KBest)
            result=Trainning(X_train_new,X_test_new,y_train,y_test,clf,'SelectKBest_'+str(k_KBest))            
            new_measure=result.Score_train
            
            if (abs(new_measure-old_measure)>=0.01): 
                break
            else :
                old_measure=new_measure
                X_train_old,X_test_old=X_train_new,X_test_new
                results.append(result)
                states.append('SelectKBest_'+str(k_KBest))
            
        k_KBest=k_old
        
        while True:
            print('k_KBest '+str(k_KBest))
            print('old_measure '+str(old_measure))
            k_KBest=k_KBest-100
            X_train_new,X_test_new=KBestFS(X_train_old,X_test_old,metric_of_KBest,k_KBest)
            result=Trainning(X_train_new,X_test_new,y_train,y_test,clf,'SelectKBest_'+str(k_KBest))
            new_measure=result.Score_train 

            
            if (abs(new_measure-old_measure)>=0.005): 
                break
            else :
                old_measure=new_measure
                X_train_old,X_test_old=X_train_new,X_test_new
                results.append(result)
                states.append('SelectKBest_'+str(k_KBest))    
                
                
        return results,states, X_train_old,X_test_old 

    
i=1    
for train_index, test_index in cv.split(X):
        print('fold '+str(i)+' is processing...')
        i=i+1
        X_train,X_test,y_train,y_test=X.iloc[train_index,:],X.iloc[test_index,:],y.iloc[train_index],y.iloc[test_index]
        if i==2:
            result=Trainning(X_train,X_test,y_train,y_test,clf,'Initialization')
            results.append(result)

            X_train,X_test=Normalization(X_train,X_test)
            result=Trainning(X_train,X_test,y_train,y_test,clf,'Normalization')
            results.append(result) 

            results,states, X_train_old,X_test_old =FindBestK_Filtering_plot(X_train,X_test,metric_of_KBest) 
         
                X_train,X_test=FindBestK_Filtering(X_train,X_test,metric_of_KBest)
        result=Trainning(X_train,X_test,y_train,y_test,clf,'SelectKBest')
        results.append(result)
Results_df = pd.DataFrame(columns=['State', 'Train Acc', 'Test Acc','Train AUC','Test AUC','# Featuress'])
Results_df=PrintResults(results, 'Initialization',Results_df)
Results_df=PrintResults(results, 'Normalization',Results_df)
for state in states:   
    Results_df=PrintResults(results, state,Results_df)   
Results_df.head(50)
g=sns.catplot(x="State", y="Test Acc",kind="point", data=Results_df,color='r')
g.set_xticklabels(label='',rotation=70,size=15)
g.set(ylim=(88, 100))
g.set_axis_labels("","")
g.fig.suptitle('Trend of Test ACC', size=15,color='b')
plt.show()